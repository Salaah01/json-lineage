var searchIndex = JSON.parse('{\
"jsonl_converter":{"doc":"","t":"AAAAADLLFLLLFLFLLLLLMLLLFDLLLLLLLLLLLLLLAADLLMLLLLLLLLDLLMLLMLLLLLLAAADLLLLLLLLLLLDLLLLLLLLLLLF","n":["brackets","cli","json_object","processors","readers","BracketStack","borrow","borrow_mut","brackets_map","from","into","into_iter","is_closing_bracket","is_empty","is_opening_bracket","len","new","next","pop_pair","push","stack","try_from","try_into","type_id","parse_args","JSONLString","borrow","borrow_mut","clear","deref","fmt","from","into","new","push_char","push_str","to_string","try_from","try_into","type_id","byte_processor","line_processor","ByteProcessor","borrow","borrow_mut","bracket_stack","from","into","new","process_char","push_bracket","try_from","try_into","type_id","LineProcessor","borrow","borrow_mut","bracket_stack","from","into","jsonl_string","new","process_line","push_bracket","try_from","try_into","type_id","byte_iter","line_iter","utils","ByteIterator","borrow","borrow_mut","from","into","into_iter","new","next","next_char","try_from","try_into","type_id","LineIterator","borrow","borrow_mut","from","into","into_iter","new","next","next_line","try_from","try_into","type_id","verify_first_char"],"q":[[0,"jsonl_converter"],[5,"jsonl_converter::brackets"],[24,"jsonl_converter::cli"],[25,"jsonl_converter::json_object"],[40,"jsonl_converter::processors"],[42,"jsonl_converter::processors::byte_processor"],[54,"jsonl_converter::processors::line_processor"],[67,"jsonl_converter::readers"],[70,"jsonl_converter::readers::byte_iter"],[82,"jsonl_converter::readers::line_iter"],[94,"jsonl_converter::readers::utils"]],"d":["This module helps us keep track of brackets that have been …","Contains CLI related code.","This module contains structs that represent JSON objects …","Contains modules for processing the JSON file contents.","Contains modules for reading the JSON file contents.","This struct is used to keep track of brackets that have …","","","Returns a map of brackets with their corresponding opening …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Checks if a character is a closing bracket. Note: this …","Checks if the <code>BracketStack</code> is empty.","Checks if a character is an opening bracket. Note: this …","","Creates a new <code>BracketStack</code>.","","Pops a bracket off of the <code>BracketStack</code>.","Pushes a bracket onto the <code>BracketStack</code>.","","","","","Returns the filepath from the command line arguments …","This struct represents a JSONL string being built.","","","Clears the <code>string</code>.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new instance of <code>JSONLString</code>.","Adds a character to the <code>string</code>.","Adds a string to the <code>string</code>.","","","","","This module contains the functionality to process a stream …","This module contains the functionality to process a lines …","This struct contains the functionality to process a stream …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new instance of <code>ByteProcessor</code>.","Processes a character. This function will either add the …","Adds a bracket to the <code>bracket_stack</code>.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a mew instance pf <code>LineProcessor</code>.","Processes a line of a file. Whilst processing the line, it …","Adds a bracket to the <code>bracket_stack</code>.","","","","This module contains the <code>ByteIterator</code> struct, which is …","This module contains the <code>LineIterator</code> struct, which is …","","This struct is used to iterate over the bytes of a file.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Creates a new <code>ByteIterator</code> from a file. This is used to …","Returns the next byte of the file.","Returns the next character of the file.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Returns the next line of the file.","Returns the next line of the file.","","","","! This module contains utilities for the <code>readers</code> module. …"],"i":[0,0,0,0,0,0,4,4,0,4,4,4,0,4,0,4,4,4,4,4,4,4,4,4,0,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,14,14,14,14,14,14,14,14,14,14,14,0,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,16,16,16,16,16,16,16,16,16,16,16,0,18,18,18,18,18,18,18,18,18,18,18,0],"f":[0,0,0,0,0,0,[[]],[[]],[[],[[2,[1,1]]]],[[]],[[]],[[]],[1,3],[4,3],[1,3],[4,5],[[],4],[4,6],[[4,1],[[6,[1]]]],[[4,1]],0,[[],7],[[],7],[[],8],[[]],0,[[]],[[]],[9],[9],[[9,10],11],[[]],[[]],[[],9],[[9,1]],[[9,12]],[[],13],[[],7],[[],7],[[],8],0,0,0,[[]],[[]],0,[[]],[[]],[[],14],[[14,1]],[[14,1]],[[],7],[[],7],[[],8],0,[[]],[[]],0,[[]],[[]],0,[[],15],[[15,12]],[[15,1]],[[],7],[[],7],[[],8],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[12,[[17,[16]]]],[16,6],[16,[[6,[1]]]],[[],7],[[],7],[[],8],0,[[]],[[]],[[]],[[]],[[]],[12,[[17,[18]]]],[18,6],[18,[[6,[13]]]],[[],7],[[],7],[[],8],[1]],"c":[],"p":[[15,"char"],[3,"HashMap"],[15,"bool"],[3,"BracketStack"],[15,"usize"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"JSONLString"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"String"],[3,"ByteProcessor"],[3,"LineProcessor"],[3,"ByteIterator"],[6,"Result"],[3,"LineIterator"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
